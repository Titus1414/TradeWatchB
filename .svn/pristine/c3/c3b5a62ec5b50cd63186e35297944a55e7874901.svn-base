using NewsAPI;
using NewsAPI.Constants;
using NewsAPI.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Xml;
using TradeWatchB.Models;

namespace TradeWatchB.Services.News
{
    public class NewsServices : INewsService
    {
        public readonly TradeWatchDBContext _context;
        public static dynamic myObj = "";
        public static List<string> lisStk = new List<string>(new string[] { });
        public NewsServices(TradeWatchDBContext context)
        {
            _context = context;

        }

        public Task<string> cryptoNews(List<test> dt)
        {
            try
            {
                foreach (var item in dt)
                {
                    var sd = _context.CryptoNews.Where(a => a.Date == item.date).FirstOrDefault();
                    if (sd == null)
                    {
                        CryptoNews stockNews = new CryptoNews();
                        stockNews.Date = Convert.ToDateTime(item.date).Date.ToString();
                        stockNews.ImageUrl = item.image_url;
                        stockNews.Sentiment = item.sentiment;
                        stockNews.NewsUrl = item.news_url;
                        stockNews.SourceName = item.source_name;
                        stockNews.Text = item.text;
                        stockNews.Tickers = String.Join(",", item.tickers.ToList());
                        stockNews.Title = item.title;
                        stockNews.Topics = String.Join(",", item.topics.ToList());
                        stockNews.Type = item.type;
                        _context.CryptoNews.Add(stockNews);
                    }
                }
                _context.SaveChanges();

            }
            catch (Exception)
            {

                throw;
            }
            return null;
        }

        public Task<string> forexNews(List<test> dt)
        {
            try
            {
                foreach (var item in dt)
                {
                    var sd = _context.ForexNews.Where(a => a.Date == item.date).FirstOrDefault();
                    if (sd == null)
                    {
                        ForexNews stockNews = new ForexNews();
                        stockNews.Date = Convert.ToDateTime(item.date).Date.ToString();
                        stockNews.ImageUrl = item.image_url;
                        stockNews.Sentiment = item.sentiment;
                        stockNews.NewsUrl = item.news_url;
                        stockNews.SourceName = item.source_name;
                        stockNews.Text = item.text;
                        stockNews.Tickers = String.Join(",", item.tickers.ToList());
                        stockNews.Title = item.title;
                        stockNews.Topics = String.Join(",", item.topics.ToList());
                        stockNews.Type = item.type;
                        _context.ForexNews.Add(stockNews);
                    }
                }
                _context.SaveChanges();

            }
            catch (Exception)
            {

                throw;
            }
            return null;
        }

        public async Task<List<StockNews>> GetStockNews()
        {

            var sd = DateTime.Now.ToString("ddd, dd MMM yyyy");
            var es = DateTime.Now.ToString("M/dd/yyyy");
            var dt = _context.StockNews.Where(a => a.Date.Contains(sd) || a.Date.Contains(es)).ToList();

            return dt;
        }


        async Task<dynamic> INewsService.NewApi(string q)
        {
            
            var client = new HttpClient();
            HttpResponseMessage response = await client.GetAsync("https://news.google.com/rss/search?hl=en-PK&gl=PK&ceid=PK:en&q=" + q);
            HttpContent responseContent = response.Content;
            using (var reader = new StreamReader(await responseContent.ReadAsStreamAsync()))
            {
                var sd = await reader.ReadToEndAsync();
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(sd);
                var jsonText = JsonConvert.SerializeXmlNode(doc).Replace("link", "news_url").Replace("source", "source_name").Replace("description","text").Replace("pubDate","date");
                
                dynamic myObja = JsonConvert.DeserializeObject<dynamic>(jsonText);
                return await myObja;
                //foreach (var o in myObj.rss.channel.item)
                //{
                //    DateTime dt = Convert.ToDateTime(o.pubDate).Date;
                //    //lisStk.Add(String.Format("{0} ({1}) {2} {3} {4}", o.title, dt.ToString(), o.link, o.description, o.source.ToString()));
                //    //string we = o.title;
                //    //var sdq = _context.StockNews.Where(a => a.Title == we).FirstOrDefault();
                //    //if (sdq == null)
                //    //{
                //    StockNews stock = new StockNews();
                //    stock.Title = o.title;
                //    stock.Date = dt.ToString();
                //    stock.news_url = o.link;
                //    stock.Text = o.description;
                //    stock.source_name = o.source.ToString();

                //    _context.StockNews.Add(stock);
                //    //}
                //}
                //_context.SaveChanges();
            }
        }

        public async Task<List<StockNews>> googleNews(string q)
        {

            try
            {
                //NewApi(q);
                //var newsApiClient = new NewsApiClient(ApiKeys.NewsApiKey);
                //var articlesResponse = newsApiClient.GetEverything(new EverythingRequest
                //{
                //    Q = q,
                //    SortBy = SortBys.Popularity,
                //    Language = Languages.EN,
                //    From = DateTime.Now
                //}); 
                //if (articlesResponse.Status == Statuses.Ok)
                //{
                //    var dt = articlesResponse.Articles.ToList();

                //// total results found
                //Console.WriteLine(articlesResponse.TotalResults);
                //// here's the first 20
                //foreach (var article in articlesResponse.Articles)
                //{
                //var sdq = _context.StockNews.Where(a => a.Title == article.Title).FirstOrDefault();
                //if (sdq == null)
                //{
                //StockNews sd = new StockNews();

                // title
                //sd.Title = article.Title;
                //// author
                //sd.source_name = article.Author;
                //// description
                //sd.Text = article.Description;
                //// url
                //sd.news_url = article.Url;
                //// published at
                //sd.Date = Convert.ToDateTime(article.PublishedAt).Date.ToString();
                //sd.image_url = article.UrlToImage;
                //_context.StockNews.Add(sd);
                //}
                //}
                //_context.SaveChanges();

                //int ct = 0;
                //if (dt.Count > 5)
                //{
                //    ct = 5;
                //} else
                //{
                //    ct = dt.Count;
                //}


            //}


                var dts = _context.StockNews.Take(25).OrderByDescending(a => a.Id).ToList();
                return dts;
            }
            catch (Exception )
            {
                throw;
            }
        }

        public Task<string> stockNews(List<test> dt)
        {
            try
            {
                foreach (var item in dt)
                {
                    var sd = _context.StockNews.Where(a => a.Date == item.date).FirstOrDefault();
                    if (sd == null)
                    {
                        //StockNews stockNews = new StockNews();
                        //stockNews.Date = Convert.ToDateTime(item.date).Date.ToString();
                        //stockNews.ImageUrl = item.image_url;
                        //stockNews.Sentiment = item.sentiment;
                        //stockNews.NewsUrl = item.news_url;
                        //stockNews.SourceName = item.source_name;
                        //stockNews.Text = item.text;
                        //stockNews.Tickers = String.Join(",", item.tickers.ToList());
                        //stockNews.Title = item.title;
                        //stockNews.Topics = String.Join(",", item.topics.ToList());
                        //stockNews.Type = item.type;
                        //_context.StockNews.Add(stockNews);
                    }
                }
                _context.SaveChanges();

            }
            catch (Exception)
            {

                throw;
            }
            return null;
        }

        
    }
}
